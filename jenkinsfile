pipeline {
    agent any  // הגדרת סוכן כללי לפייפליין (יכול להיות כל סוכן במערכת)

    environment {
        DOCKER_REGISTRY = 'docker.io' // כתובת הרגיסטרי של דוקר
        IMAGE_NAME = 'golanm/hw' // שם התמונה שלך
        DOCKER_CREDENTIALS = 'docker-credentials' // מזהה ה-credentials שהגדרת ב-Jenkins
    }

    stages {
        stage('Checkout Git Repo') {
            steps {
                // שלב זה מבצע checkout של הקוד מהגיטהאב או ריפוזיטורי אחר
                git 'https://github.com/GolanMutzafi/pipelineproj.git' // כתובת הריפוזיטורי שלך
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // שלב זה בונה את התמונה מתוך הקוד שלך
                    // השם יהיה כפי שהגדרת ב-IMAGE_NAME
                    sh 'docker build -t $IMAGE_NAME:latest .'
                }
            }
        }

        stage('Login to Docker Registry') {
            steps {
                script {
                    // שימוש ב-credentials שהגדרת ב-Jenkins (docker-credentials)
                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        // התחברות לדוקר עם שם המשתמש והסיסמה
                        sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY'
                    }
                }
            }
        }

        stage('Push Docker Image to Registry') {
            steps {
                // שלב זה דוחף את התמונה שנבנתה ל-registry
                sh 'docker push $IMAGE_NAME:latest'
            }
        }

        stage('SSH to Linux Machine') {
            steps {
                // התחברות למכונה הוירטואלית שלך באמצעות SSH
                sshagent(['ssh-credentials']) {
                    sh 'ssh -o StrictHostKeyChecking=no user@linux-server-ip "docker pull $IMAGE_NAME:latest"'
                }
            }
        }

        stage('Run Docker Container on Linux Machine') {
            steps {
                script {
                    // הרצת הקונטיינר על המכונה הוירטואלית
                    sh 'ssh -o StrictHostKeyChecking=no user@linux-server-ip "docker run -d -p 5000:5000 $IMAGE_NAME:latest"'
                }
            }
        }

        stage('Test Application on Linux Machine') {
            steps {
                script {
                    // לבדוק אם השרות עובד בצורה תקינה
                    sh 'ssh -o StrictHostKeyChecking=no user@linux-server-ip "curl http://localhost:5000"'
                }
            }
        }
    }
}
